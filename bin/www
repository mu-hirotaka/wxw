#!/usr/bin/env node
var debug = require('debug')('wxw');
var app = require('../app');
var async = require('async');
var twitter = require('twitter');
var us = require('underscore')._;
var MeCab = new require('mecab-async')
  , mecab = new MeCab();

app.set('port', process.env.PORT || 3000);

var server = app.listen(app.get('port'), function() {
  debug('Express server listening on port ' + server.address().port);
});

var twit = new twitter({
  consumer_key: 'cIXurcheLQEE5HjgO1VJn7CXZ',
  consumer_secret: 'sXLXy374wMc9kJAAiexWe68hIqRtjqytHHWG4UXQv8ol7xwuxO',
  access_token_key: '2602562190-1gwuryRjA6lw9jH6rFZmObE7yTnuArIjCUdHNw7',
  access_token_secret: 'Ho3rIsn6oBz5282omsiESIveyCBarWsKFRYi8LxkIafgS'
});

var users = ['SoccerKingJP', 'takapon_jp', 'emuskbt'];
var nouns = hash(users);
var currentUser1 = {
  text: 'W',
  nickname: 'system',
};
var currentUser2 = {
  text: 'W',
  nickname: 'system',
};
var currentUser;
var currentNo;

var io = require('socket.io')(server);
io.on('connection', function(socket) {
  emitBaseInfo(socket);
});

setInterval(function() { tweetAssociate(); }, 10000);

function emitBaseInfo(socket) {
  socket.emit('login', getInitialInfo());
}
function broadcastBaseInfo() {
  io.sockets.emit('broadcast base info', {
    word1: { text: currentUser1.text, reference: getReference(currentUser1.nickname) },
    word2: { text: currentUser2.text, reference: getReference(currentUser2.nickname) }
  });
}

var regexp = /^(\w|@|\/|:|\.|\?|!|&|;|:|？|！|\)|\(|"|\||「|｢|」|｣|⇒|-|~|#|\+|=)/g;
function tweetAssociate() {
  async.waterfall([
    function(callback) {
      if (1) {
        currentUser = selectUser();
        currentNo = Math.random() > 0.5 ? 1 : 2;
        twit.get('/search/tweets.json', {"q":"from:" + currentUser}, function(tweets) {
          callback(null, tweets);
        });
      }
    },
    function(tweets, callback) {
      var tweetText = [];
      us.each(tweets.statuses, function(element) {
        tweetText.push(element.text);
      });
      mecab.parse(tweetText.join(""), function(err, results) {
        if (err) { throw err; }
        us.each(results, function(result) {
          if (!result[0].match(regexp)
            && result[1] == '名詞'
            && result[2] != '代名詞'
            && result[3] != '人名') {
            nouns[currentUser].push(result[0]);
          }
        });
        nouns[currentUser] = us.uniq(nouns[currentUser]);
        callback(null);
      });
    }], function(err, results) {
        copyCurrentUserInfo();
        broadcastBaseInfo();
        console.log(nouns);
  });
}

function selectUser() {
  var length = users.length;
  var user = users[Math.floor(Math.random() * length)];
  return user;
}

function getReference(nickname) {
  return 'by ' + nickname;
}

function copyCurrentUserInfo() {
  var length = nouns[currentUser].length;
  var text = nouns[currentUser][Math.floor(Math.random() * length)];
  if (currentNo === 1) {
    currentUser1.text = text;
    currentUser1.nickname = currentUser;
  } else {
    currentUser2.text = text;
    currentUser2.nickname = currentUser;
  }
}

function hash(keys) {
  var h = {};
  us.each(keys, function(key) {
    h[key] = [];
  });
  return h;
}

function getInitialInfo() {
  // 後々キャッシュさせて、仮の値を辞める
  var init = {
    seqNo: 0,
    word1: { text: 'W', reference: getReference('system') },
    word2: { text: 'W', reference: getReference('system') }
  };
  return init;
}
