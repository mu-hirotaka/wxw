#!/usr/bin/env node
var debug = require('debug')('wxw');
var app = require('../app');
var async = require('async');
var twitter = require('twitter');
var us = require('underscore')._;
var crypto = require('crypto');
var MeCab = new require('mecab-async')
  , mecab = new MeCab();

app.set('port', process.env.PORT || 3000);

var server = app.listen(app.get('port'), function() {
  debug('Express server listening on port ' + server.address().port);
});

var twit = new twitter({
  consumer_key: 'cIXurcheLQEE5HjgO1VJn7CXZ',
  consumer_secret: 'sXLXy374wMc9kJAAiexWe68hIqRtjqytHHWG4UXQv8ol7xwuxO',
  access_token_key: '2602562190-1gwuryRjA6lw9jH6rFZmObE7yTnuArIjCUdHNw7',
  access_token_secret: 'Ho3rIsn6oBz5282omsiESIveyCBarWsKFRYi8LxkIafgS'
});

var users = ['SoccerKingJP', 'takapon_jp', 'emuskbt', 'DruckerBOT', 'itmedia_news'];
var nouns = hash(users);
var currentUser1 = {
  text: 'W',
  nickname: 'system',
};
var currentUser2 = {
  text: 'W',
  nickname: 'system',
};
var currentUser;
var currentNo;

var io = require('socket.io')(server);
io.on('connection', function(socket) {
  emitBaseInfo(socket);

  socket.on('post word', function(data) {
    pushWord(data);
  });

  socket.on('post comment', function(data) {
    pushComment(data);
  });
});

setInterval(function() { tweetAssociate(); }, 30000);
setInterval(function() { broadcastComments(); }, 5000);

function emitBaseInfo(socket) {
  socket.emit('login', getInitialInfo());
}
function broadcastBaseInfo() {
  var userComments = [];
  var mixText = currentUser1.text + currentUser2.text;
  var key = md5_hex(mixText);
  if (key in comments) {
    userComments = comments[key];
  }

  io.sockets.emit('broadcast base info', {
    word1: { text: currentUser1.text, reference: getReference(currentUser1.nickname) },
    word2: { text: currentUser2.text, reference: getReference(currentUser2.nickname) },
    comments: userComments,
  });
}
function broadcastComments() {
  var userComments = [];
  var mixText = currentUser1.text + currentUser2.text;
  var key = md5_hex(mixText);
  if (key in comments) {
    userComments = comments[key];
  }

  io.sockets.emit('broadcast comments', {
    comments: userComments,
  });
}

function pushWord(data) {
  var word = data.word;
  if (!('user' in nouns)) {
    nouns['user'] = [];
  }
  nouns['user'].push(word);
  nouns['user'] = us.uniq(nouns['user']);
}

var comments = {};
function pushComment(data) {
  var comment = data.comment || '';
  var mixText = data.text1 + data.text2;
  var key = md5_hex(mixText);
  if (!(key in comments)) {
    comments[key] = [];
  }
  if (comment.length > 0) {
    comments[key].push(comment);
    comments[key] = us.uniq(comments[key]);
  }
}

var regexp = /^(\w|@|\/|:|\.|\?|!|&|;|:|？|！|\)|\(|"|\||「|｢|」|｣|⇒|-|~|#|\+|=|\^)/g;
function tweetAssociate() {
  currentUser = selectUser();
  currentNo = Math.random() > 0.5 ? 1 : 2;
  if (currentUser === 'user') {
    copyCurrentUserInfo();
  } else {
    async.waterfall([
      function(callback) {
        if (1) {
          twit.get('/search/tweets.json', {"q":"from:" + currentUser}, function(tweets) {
            callback(null, tweets);
          });
        }
      },
      function(tweets, callback) {
        var tweetText = [];
        us.each(tweets.statuses, function(element) {
          tweetText.push(element.text);
        });
        mecab.parse(tweetText.join(""), function(err, results) {
          if (err) { throw err; }
          us.each(results, function(result) {
            if (!result[0].match(regexp)
              && result[1] == '名詞'
              && result[2] != '代名詞'
              && result[3] != '人名') {
              nouns[currentUser].push(result[0]);
            }
          });
          nouns[currentUser] = us.uniq(nouns[currentUser]);
          callback(null);
        });
      }], function(err, results) {
          copyCurrentUserInfo();
          broadcastBaseInfo();
          console.log(nouns);
    });
  }
}

function selectUser() {
  var length = users.length;
  var user;
  if ('user' in nouns) {
    var tmp = users;
    tmp = tmp.concat(['user']);
    user = tmp[Math.floor(Math.random() * (length + 1))];
  } else {
    user = users[Math.floor(Math.random() * length)];
  }
  return user;
}

function getReference(nickname) {
  return 'by ' + nickname;
}

function copyCurrentUserInfo() {
  var length = nouns[currentUser].length;
  var text = nouns[currentUser][Math.floor(Math.random() * length)];
  if (currentNo === 1) {
    currentUser1.text = text;
    currentUser1.nickname = currentUser;
  } else {
    currentUser2.text = text;
    currentUser2.nickname = currentUser;
  }
}

function hash(keys) {
  var h = {};
  us.each(keys, function(key) {
    h[key] = [];
  });
  return h;
}

function md5_hex(src) {
  var md5 = crypto.createHash('md5');
  md5.update(src, 'utf8');
  return md5.digest('hex');
}

function getInitialInfo() {
  // 後々キャッシュさせて、仮の値を辞める
  var init = {
    seqNo: 0,
    word1: { text: 'W', reference: getReference('system') },
    word2: { text: 'W', reference: getReference('system') }
  };
  return init;
}
